import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telethon import TelegramClient

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = "7569287143:AAHhiXwh0Se87po-K6c8H9JGWwTcO4iQRaA"
API_ID = 25923177  # –¢–í–û–ô API_ID
API_HASH = "2afc135cc1dfb5debe9270ab297a12e5"  # –¢–í–û–ô API_HASH
ADMIN_ID = 227230830  # –¢–í–û–ô ID
SESSIONS_DIR = "sessions"

# –ö–æ–º–∞–Ω–¥–∞ —Ç–≥
async def tg_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type == "private":
        await update.message.reply_text("‚ÑπÔ∏è –¢–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")
        return

    sessions = [f for f in os.listdir(SESSIONS_DIR) if f.endswith('.session')]
    if not sessions:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π!")
        return

    session = random.choice(sessions)
    phone = await get_phone(session)
    
    if not phone:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏!")
        return

    # –ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞
    message_text = (
        "üîπ **TELEGRAM**\n\n"
        f"üì± **–ù–æ–º–µ—Ä:** `{phone}`\n"
        "üü¢ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–Ω–æ 5 –º–∏–Ω—É—Ç\n\n"
        "‚¨áÔ∏è **–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**"
    )

    kb = [[InlineKeyboardButton("üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data=f"code_{session}")]]
    
    await update.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ - –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∫–æ–¥–∞
async def btn_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    code = str(random.randint(10000, 99999))
    
    # –í–∏–∑—É–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ —Å –∫–æ–¥–æ–º
    message_text = (
        "üîπ **TELEGRAM**\n\n"
        "üì± **–ù–æ–º–µ—Ä:** `‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢`\n"
        f"üî¢ **–ö–æ–¥:** `{code}`\n"
        "‚è∞ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** 5 –º–∏–Ω—É—Ç\n\n"
        "‚úÖ **–ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    kb = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∫–æ–¥", callback_data=query.data)],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚ùå **–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `—Ç–≥`",
        parse_mode='Markdown'
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    sessions = len([f for f in os.listdir(SESSIONS_DIR) if f.endswith('.session')])
    await update.message.reply_text(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: `{sessions}`\n"
        f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π: `{len(API_KEYS)}`\n"
        f"‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: `–ë–µ–∑ –ø—Ä–æ–∫—Å–∏`",
        parse_mode='Markdown'
    )

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'(?i)^—Ç–≥$'), tg_cmd))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CallbackQueryHandler(btn_handler, pattern="^code_"))
    app.add_handler(CallbackQueryHandler(cancel_handler, pattern="^cancel$"))
    app.run_polling()

if __name__ == "__main__":
    os.makedirs(SESSIONS_DIR, exist_ok=True)
    main()
